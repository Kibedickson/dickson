(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{211:function(e,t,n){"use strict";n.r(t);var l=n(209),r=n(18),o=Object(r.a)({},(function(){var e=this,t=e.$createElement;return(e._self._c||t)("h1",{staticClass:"text-5xl font-bold tracking-wider leading-10"},[e._t("default")],2)}),[],!1,null,null,null).exports,c=Object(r.a)({},(function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("div",{staticClass:"flex flex-col md:flex-row items-center my-12"},[l("img",{staticClass:"rounded-full h-8 shadow-outline shadow-xl mr-2",attrs:{src:n(156),alt:"avatar-sm"}}),e._v(" "),l("span",{staticClass:"text-sm mr-2 text-blue-700"},[e._v("\n    Dickson Kibe\n  ")]),e._v(" "),l("span",{staticClass:"text-sm mr-2"},[e._t("published-at")],2),e._v(" "),l("span",{staticClass:"text-sm mr-2"},[e._t("time-to-read")],2)])}),[],!1,null,null,null).exports,v={name:"ArticlesList",layout:"article",components:{ArticleBody:Object(r.a)({},(function(){var e=this,t=e.$createElement;return(e._self._c||t)("div",[e._t("default")],2)}),[],!1,null,null,null).exports,ArticleTitle:o,ArticleAuthor:c},computed:{publishedAt:function(){var e=Object(l.a)(new Date,new Date(2021,3,25,23,28,0));return"published ".concat(e," ago...")}}},_=Object(r.a)(v,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("article-title",[e._v("\n    ðŸ”¥ SOLID PRINCIPLES ðŸ”¥\n  ")]),e._v(" "),n("article-author",{scopedSlots:e._u([{key:"published-at",fn:function(){return[e._v("\n      "+e._s(e.publishedAt)+"\n    ")]},proxy:!0},{key:"time-to-read",fn:function(){return[e._v("\n      1 min read\n    ")]},proxy:!0}])}),e._v(" "),n("article-body",[n("img",{staticClass:"rounded-2xl",attrs:{src:"https://pbs.twimg.com/media/EyHPOo7VIAAbFRn?format=jpg&name=large",alt:"SOLID-PRINCIPLES"}}),e._v(" "),n("article",{staticClass:"mt-8"},[n("p",[e._v("First of all, It is an acronym.")]),e._v(" "),n("p",[e._v("S => Single Responsibility Principle")]),e._v(" "),n("p",[e._v("O => Open Close Principle")]),e._v(" "),n("p",[e._v("L => Liskov Substitution Principle")]),e._v(" "),n("p",[e._v("I => Interface Segregation")]),e._v(" "),n("p",[e._v("D => Dependency Inversion")])]),e._v(" "),n("article",{staticClass:"mt-8"},[n("p",{staticClass:"mb-6"},[e._v("\n        So letâ€™s dig in to the SOLID principles at a glance.\n      ")]),e._v(" "),n("hr"),e._v(" "),n("b",[e._v("Single Responsibility:")]),e._v(" "),n("p",[e._v("\n        A Class should be responsible for a single task.\n      ")]),e._v(" "),n("hr"),e._v(" "),n("b",[e._v("Open-Close Principle:")]),e._v(" "),n("p",[e._v("\n        A Class should be open to extension and close to modification."),n("br")]),e._v(" "),n("hr"),e._v(" "),n("b",[e._v("Liskov Substitution:")]),e._v(" "),n("p",[e._v("\n        A derived Class can be substituted at places where base Class is used."),n("br")]),e._v(" "),n("hr"),e._v(" "),n("b",[e._v("Interface Segregation:")]),e._v(" "),n("p",[e._v("\n        Donâ€™t make FAT Interfaces. i.e. Classes donâ€™t have to override extra agreements that are not needed for that Class simply because it is there in interface."),n("br")]),e._v(" "),n("hr"),e._v(" "),n("b",[e._v("Dependency Inversion:")]),e._v(" "),n("p",[e._v("\n        Depend on abstractions, not on concretions. Not only high level Classes but low level Classes also depend on the abstractions in order to decouple the code."),n("br")]),e._v(" "),n("hr")])])],1)}),[],!1,null,null,null);t.default=_.exports}}]);